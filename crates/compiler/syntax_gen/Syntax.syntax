

struct Syntax {
    items: Vec<Item>,
}

enum Item {
    Struct(Struct),
    Enum(Enum),
}

struct Struct [
    'struct'
    name:Ident
    generics:Generics?
    fields:Fields<';'>
]

struct Enum [
    'enum' .
    name:Ident .
    (generics:Generics .)?
    '{' . variants:Delimited<',', Variant> . '}'
]

struct Variant [
    name:Ident .
    (fields: Fields<','>)?
]

struct Generics {
    params: Vec<String>,
}

enum Fields<$Term> {
    Unit[ $Term ],
    Tuple [ '(' . Delimited<',', Type> . ')' ],
    Named [ '{' . Delimited<',', Field> . '}' ],
}

struct Field [
    name:Ident
    .
    ':'
    .
    ty:Type
]

struct Delimited<$Delim, T> [
    (items:(T .) (!$Delim items:(T .))* !$Delim?)?
]

enum Type {
    BuiltIn(BuiltIn),
    Named(String),
    Ref(Box<Type>),
    Tuple(Vec<Type>),
    Array(Box<Type>),
    Generics(Box<Type>, Vec<Type>),
}

enum BuiltIn {
    String,
    Int,
    Bool,
}